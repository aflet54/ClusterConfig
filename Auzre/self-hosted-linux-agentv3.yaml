### Application Config Map
apiVersion: v1
kind: ConfigMap
metadata:
    name: azure-agent-config
    namespace: azure
data:
    PGID: "1000"
    PUID: "1000"
    TZ: "Australia/Brisbane"
    ORGURL: "https://dev.azure.com/ocnathor"
    S6VERSION: "3.1.2.1"
    TARGETARCH: "linux-x64"
---
### Config Map
apiVersion: v1
kind: ConfigMap
metadata:
    name: azure-agent-startupscript
    namespace: azure
data:
    startup.sh: |
      #!/bin/bash
      echo "Starting Apt-Get Update and installing required apps"
      echo "APT::Get::Assume-Yes \"true\";" > /etc/apt/apt.conf.d/90assumeyes
      apt-get update
      apt-get install -y --no-install-recommends \
      apt-transport-https \
      apt-utils \
      ca-certificates \
      curl \
      git \
      iputils-ping \
      jq \
      lsb-release \
      software-properties-common
      rm -rf /var/lib/apt/lists/*
      echo "Downloading Azure Agent"
      curl -LS https://aka.ms/InstallAzureCLIDeb | bash
      echo "Finished installing Azure Cli"
      sleep 10
      set -e
      if [ -z "$AZP_URL" ]; then
        echo 1>&2 "error: missing AZP_URL environment variable"
        exit 1
      fi
      if [ -z "$AZP_TOKEN_FILE" ]; then
        if [ -z "$AZP_TOKEN" ]; then
          echo 1>&2 "error: missing AZP_TOKEN environment variable"
          exit 1
        fi
        AZP_TOKEN_FILE=/azp/.token
        echo -n $AZP_TOKEN > "$AZP_TOKEN_FILE"
      fi
      unset AZP_TOKEN
      if [ -n "$AZP_WORK" ]; then
        mkdir -p "$AZP_WORK"
      fi
      export AGENT_ALLOW_RUNASROOT="1"
      cleanup() {
        if [ -e config.sh ]; then
          print_header "Cleanup. Removing Azure Pipelines agent..."
          # If the agent has some running jobs, the configuration removal process will fail.
          # So, give it some time to finish the job.
          while true; do
            ./config.sh remove --unattended --auth PAT --token $(cat "$AZP_TOKEN_FILE") && break
            echo "Retrying in 30 seconds..."
            sleep 30
          done
        fi
      }
      print_header() {
        lightcyan='\033[1;36m'
        nocolor='\033[0m'
        echo -e "${lightcyan}$1${nocolor}"
      }
      # Let the agent ignore the token env variables
      export VSO_AGENT_IGNORE=AZP_TOKEN,AZP_TOKEN_FILE
      print_header "1. Determining matching Azure Pipelines agent..."
      AZP_AGENT_PACKAGES=$(curl -LsS \
          -u user:$(cat "$AZP_TOKEN_FILE") \
          -H 'Accept:application/json;' \
          "$AZP_URL/_apis/distributedtask/packages/agent?platform=$TARGETARCH&top=1")
      AZP_AGENT_PACKAGE_LATEST_URL=$(echo "$AZP_AGENT_PACKAGES" | jq -r '.value[0].downloadUrl')
      if [ -z "$AZP_AGENT_PACKAGE_LATEST_URL" -o "$AZP_AGENT_PACKAGE_LATEST_URL" == "null" ]; then
        echo 1>&2 "error: could not determine a matching Azure Pipelines agent"
        echo 1>&2 "check that account '$AZP_URL' is correct and the token is valid for that account"
        exit 1
      fi
      print_header "2. Downloading and extracting Azure Pipelines agent..."
      curl -LsS $AZP_AGENT_PACKAGE_LATEST_URL | tar -xz & wait $!
      source ./env.sh
      print_header "3. Configuring Azure Pipelines agent..."
      ./config.sh --unattended \
        --agent "${AZP_AGENT_NAME:-$(hostname)}" \
        --url "$AZP_URL" \
        --auth PAT \
        --token $(cat "$AZP_TOKEN_FILE") \
        --pool "${AZP_POOL:-Default}" \
        --work "${AZP_WORK:-_work}" \
        --replace \
        --acceptTeeEula & wait $!
      print_header "4. Running Azure Pipelines agent..."
      trap 'cleanup; exit 0' EXIT
      trap 'cleanup; exit 130' INT
      trap 'cleanup; exit 143' TERM
      # chmod +x ./run-docker.sh
      # To be aware of TERM and INT signals call run.sh
      # Running it with the --once flag at the end will shut down the agent after the build is executed
      # ./run-docker.sh "$@" & wait $!
---
### Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: azure-agent-deployment
  namespace: azure
  labels:
    app: azure-agent
spec:
    replicas: 1
    selector:
        matchLabels:
            app: azure-agent
    template:
        metadata:
            labels:
                app: azure-agent
        spec:
          volumes:
            - name: mediaserver-volume
              nfs:
                server: 192.168.1.68
                path: "/volume1/Data"
            - name: azure-agent-startupscript
              configMap:
                name: azure-agent-startupscript
                defaultMode: 0777
            - name: azure-dir
              emptyDir: {}
          containers:
            - name: azure-agent
              image: debian
              command: ["/azure-agent-startupscript/startup.sh"]
              envFrom:
              - configMapRef:
                  name: azure-agent-config
              - secretRef:
                  name: azure-secret
              volumeMounts:
                - name: mediaserver-volume
                  mountPath: "/config"
                  subPath: Config/azure-agent
                - name: azure-agent-startupscript
                  mountPath: /azure-agent-startupscript
                - name: azure-dir
                  mountPath: /azure
              resources:
                requests: 
                  memory: "256Mi"
                limits:
                  memory: "2048Mi"
              
                  
             